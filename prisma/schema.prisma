// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String    @unique
  emailVerified DateTime?  
  role          Role    @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  testimonial   Testimonial[]
  reviews       Review[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id          String      @id @default(cuid())
  title       String
  description String
  image       String
  packages    Package[]
}

model Team {
  id   String @id @default(cuid())
  name String
  bio String
  position String
  image String
}

model SitePage {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  sections  Section[]
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Section {
  id          String   @id @default(cuid())
  title       String
  description String
  pageId      String
  page        SitePage @relation(fields: [pageId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Package {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  serviceId     String
  service       Service     @relation(fields: [serviceId], references: [id])
  image         String
  SharingPrice  String
  PrivatePrice  String
  SharingOffer  String?
  PrivateOffer  String?
  Duration      String
  highlights    String?
  description   String
  itinerary     String?
  costInclusion String?
  costExclusion String?
  gallery       String[]
  bookings      Booking[]
  reviews       Review[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model Review {
  id          String      @id @default(cuid())
  packageId   String
  package     Package     @relation(fields: [packageId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  rating      Int
  comment     String?
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Testimonial {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  rating      Int
  comment     String
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum RoomType {
  PRIVATE
  SHARED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Booking {
  id              String      @id @default(cuid())
  packageId       String
  package         Package     @relation(fields: [packageId], references: [id])
  userId          String?
  fullname        String?
  email           String?
  phone           String
  country         String
  roomPreferences RoomType    @default(PRIVATE)
  noofPerson      Int
  message         String?
  bookingDate     DateTime
  status          BookingStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userBooking  User?      @relation(fields: [userId], references: [id])
}







