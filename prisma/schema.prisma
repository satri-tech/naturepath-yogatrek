generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String        @unique
  image         String?
  role          Role          @default(USER)
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  accounts      Account[]
  bookings      Booking[]
  reviews       Review[]
  sessions      Session[]
  testimonial   Testimonial[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id          String    @id @default(cuid())
  title       String
  description String
  image       String
  createdAt   DateTime  @default(now())
  slug        String
  updatedAt   DateTime  @default(now()) @updatedAt
  packages    Package[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  bio       String
  position  String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SitePage {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sections  Section[]
}

model Section {
  id          String   @id @default(cuid())
  title       String
  description String
  pageId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  page        SitePage @relation(fields: [pageId], references: [id])
}

model Package {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  serviceId     String
  image         String
  highlights    String?
  description   String
  itinerary     String?
  costInclusion String?
  costExclusion String?
  gallery       String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Duration      String
  PrivateOffer  String?
  PrivatePrice  String
  SharingOffer  String?
  SharingPrice  String
  bookings      Booking[]
  service       Service   @relation(fields: [serviceId], references: [id])
  reviews       Review[]
}

model Review {
  id        String   @id @default(cuid())
  packageId String
  userId    String
  rating    Int
  comment   String?
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  package   Package  @relation(fields: [packageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Testimonial {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  comment   String
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Booking {
  id              String        @id @default(cuid())
  packageId       String
  userId          String?
  fullname        String?
  email           String?
  phone           String
  country         String
  roomPreferences RoomType      @default(PRIVATE)
  noofPerson      Int
  message         String?
  bookingDate     DateTime
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  package         Package       @relation(fields: [packageId], references: [id])
  userBooking     User?         @relation(fields: [userId], references: [id])
}

model Gallery {
  id            String   @id @default(cuid())
  title         String
  galleryPhotos String[]
  thumbnail     String
}

enum Role {
  ADMIN
  USER
}

enum RoomType {
  PRIVATE
  SHARED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
